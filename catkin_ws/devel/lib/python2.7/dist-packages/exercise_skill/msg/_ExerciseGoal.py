# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from exercise_skill/ExerciseGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ExerciseGoal(genpy.Message):
  _md5sum = "483e449faa3be5acb144b338632da130"
  _type = "exercise_skill/ExerciseGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
string skill_command
uint16 max_time
uint16 number_plays
uint16 proactivity
string skill_status
"""
  __slots__ = ['skill_command','max_time','number_plays','proactivity','skill_status']
  _slot_types = ['string','uint16','uint16','uint16','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       skill_command,max_time,number_plays,proactivity,skill_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ExerciseGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.skill_command is None:
        self.skill_command = ''
      if self.max_time is None:
        self.max_time = 0
      if self.number_plays is None:
        self.number_plays = 0
      if self.proactivity is None:
        self.proactivity = 0
      if self.skill_status is None:
        self.skill_status = ''
    else:
      self.skill_command = ''
      self.max_time = 0
      self.number_plays = 0
      self.proactivity = 0
      self.skill_status = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.skill_command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3H().pack(_x.max_time, _x.number_plays, _x.proactivity))
      _x = self.skill_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.skill_command = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.skill_command = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.max_time, _x.number_plays, _x.proactivity,) = _get_struct_3H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.skill_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.skill_status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.skill_command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3H().pack(_x.max_time, _x.number_plays, _x.proactivity))
      _x = self.skill_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.skill_command = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.skill_command = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.max_time, _x.number_plays, _x.proactivity,) = _get_struct_3H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.skill_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.skill_status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3H = None
def _get_struct_3H():
    global _struct_3H
    if _struct_3H is None:
        _struct_3H = struct.Struct("<3H")
    return _struct_3H
