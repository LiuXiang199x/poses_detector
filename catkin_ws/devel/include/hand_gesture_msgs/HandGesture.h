// Generated by gencpp from file hand_gesture_msgs/HandGesture.msg
// DO NOT EDIT!


#ifndef HAND_GESTURE_MSGS_MESSAGE_HANDGESTURE_H
#define HAND_GESTURE_MSGS_MESSAGE_HANDGESTURE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hand_gesture_msgs
{
template <class ContainerAllocator>
struct HandGesture_
{
  typedef HandGesture_<ContainerAllocator> Type;

  HandGesture_()
    : num_fingers(0)
    , gesture()  {
    }
  HandGesture_(const ContainerAllocator& _alloc)
    : num_fingers(0)
    , gesture(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _num_fingers_type;
  _num_fingers_type num_fingers;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gesture_type;
  _gesture_type gesture;





  typedef boost::shared_ptr< ::hand_gesture_msgs::HandGesture_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_gesture_msgs::HandGesture_<ContainerAllocator> const> ConstPtr;

}; // struct HandGesture_

typedef ::hand_gesture_msgs::HandGesture_<std::allocator<void> > HandGesture;

typedef boost::shared_ptr< ::hand_gesture_msgs::HandGesture > HandGesturePtr;
typedef boost::shared_ptr< ::hand_gesture_msgs::HandGesture const> HandGestureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hand_gesture_msgs::HandGesture_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hand_gesture_msgs::HandGesture_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hand_gesture_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'hand_gesture_msgs': ['/home/haobing/catkin_ws/src/hand_gesture_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hand_gesture_msgs::HandGesture_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hand_gesture_msgs::HandGesture_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_gesture_msgs::HandGesture_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_gesture_msgs::HandGesture_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_gesture_msgs::HandGesture_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_gesture_msgs::HandGesture_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hand_gesture_msgs::HandGesture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c6c2f03cb1294d5c9b939b4f26a1ddd5";
  }

  static const char* value(const ::hand_gesture_msgs::HandGesture_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc6c2f03cb1294d5cULL;
  static const uint64_t static_value2 = 0x9b939b4f26a1ddd5ULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_gesture_msgs::HandGesture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hand_gesture_msgs/HandGesture";
  }

  static const char* value(const ::hand_gesture_msgs::HandGesture_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hand_gesture_msgs::HandGesture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message to publish a hand gesture\n\
\n\
int32 num_fingers\n\
string gesture\n\
";
  }

  static const char* value(const ::hand_gesture_msgs::HandGesture_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hand_gesture_msgs::HandGesture_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num_fingers);
      stream.next(m.gesture);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HandGesture_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hand_gesture_msgs::HandGesture_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hand_gesture_msgs::HandGesture_<ContainerAllocator>& v)
  {
    s << indent << "num_fingers: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_fingers);
    s << indent << "gesture: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gesture);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAND_GESTURE_MSGS_MESSAGE_HANDGESTURE_H
