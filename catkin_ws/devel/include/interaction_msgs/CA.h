// Generated by gencpp from file interaction_msgs/CA.msg
// DO NOT EDIT!


#ifndef INTERACTION_MSGS_MESSAGE_CA_H
#define INTERACTION_MSGS_MESSAGE_CA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <common_msgs/KeyValuePair.h>

namespace interaction_msgs
{
template <class ContainerAllocator>
struct CA_
{
  typedef CA_<ContainerAllocator> Type;

  CA_()
    : header()
    , ca_name()
    , type()
    , emitter()
    , priority(0)
    , duration(0)
    , values()  {
    }
  CA_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ca_name(_alloc)
    , type(_alloc)
    , emitter(_alloc)
    , priority(0)
    , duration(0)
    , values(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ca_name_type;
  _ca_name_type ca_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _emitter_type;
  _emitter_type emitter;

   typedef uint16_t _priority_type;
  _priority_type priority;

   typedef uint16_t _duration_type;
  _duration_type duration;

   typedef std::vector< ::common_msgs::KeyValuePair_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::common_msgs::KeyValuePair_<ContainerAllocator> >::other >  _values_type;
  _values_type values;



  enum {
    LOW_PRIORITY = 0u,
    MEDIUM_PRIORITY = 1u,
    HIGH_PRIORITY = 2u,
  };


  typedef boost::shared_ptr< ::interaction_msgs::CA_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interaction_msgs::CA_<ContainerAllocator> const> ConstPtr;

}; // struct CA_

typedef ::interaction_msgs::CA_<std::allocator<void> > CA;

typedef boost::shared_ptr< ::interaction_msgs::CA > CAPtr;
typedef boost::shared_ptr< ::interaction_msgs::CA const> CAConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interaction_msgs::CA_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interaction_msgs::CA_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace interaction_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'interaction_msgs': ['/home/haobing/catkin_ws/src/interaction_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'common_msgs': ['/home/haobing/catkin_ws/src/common_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::interaction_msgs::CA_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interaction_msgs::CA_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interaction_msgs::CA_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interaction_msgs::CA_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interaction_msgs::CA_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interaction_msgs::CA_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interaction_msgs::CA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "58e6b2538ab1900bae6b4b2cbe8c5273";
  }

  static const char* value(const ::interaction_msgs::CA_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x58e6b2538ab1900bULL;
  static const uint64_t static_value2 = 0xae6b4b2cbe8c5273ULL;
};

template<class ContainerAllocator>
struct DataType< ::interaction_msgs::CA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interaction_msgs/CA";
  }

  static const char* value(const ::interaction_msgs::CA_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interaction_msgs::CA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#use standard header\n\
Header header\n\
\n\
string ca_name\n\
string type\n\
string emitter\n\
\n\
uint16 LOW_PRIORITY = 0\n\
uint16 MEDIUM_PRIORITY = 1\n\
uint16 HIGH_PRIORITY = 2\n\
\n\
#priority level\n\
uint16 priority\n\
\n\
#duration of the CA\n\
uint16 duration\n\
\n\
#Key-value array: ca specific fields\n\
common_msgs/KeyValuePair[] values\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: common_msgs/KeyValuePair\n\
#use standard header\n\
#Header header\n\
\n\
#string values for key and its value\n\
string key\n\
string value\n\
";
  }

  static const char* value(const ::interaction_msgs::CA_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interaction_msgs::CA_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ca_name);
      stream.next(m.type);
      stream.next(m.emitter);
      stream.next(m.priority);
      stream.next(m.duration);
      stream.next(m.values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CA_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interaction_msgs::CA_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interaction_msgs::CA_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ca_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ca_name);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "emitter: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.emitter);
    s << indent << "priority: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.priority);
    s << indent << "duration: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.duration);
    s << indent << "values[]" << std::endl;
    for (size_t i = 0; i < v.values.size(); ++i)
    {
      s << indent << "  values[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::common_msgs::KeyValuePair_<ContainerAllocator> >::stream(s, indent + "    ", v.values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERACTION_MSGS_MESSAGE_CA_H
