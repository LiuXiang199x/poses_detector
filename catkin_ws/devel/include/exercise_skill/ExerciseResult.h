// Generated by gencpp from file exercise_skill/ExerciseResult.msg
// DO NOT EDIT!


#ifndef EXERCISE_SKILL_MESSAGE_EXERCISERESULT_H
#define EXERCISE_SKILL_MESSAGE_EXERCISERESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace exercise_skill
{
template <class ContainerAllocator>
struct ExerciseResult_
{
  typedef ExerciseResult_<ContainerAllocator> Type;

  ExerciseResult_()
    : skill_result(0)  {
    }
  ExerciseResult_(const ContainerAllocator& _alloc)
    : skill_result(0)  {
  (void)_alloc;
    }



   typedef int8_t _skill_result_type;
  _skill_result_type skill_result;



  enum {
    ERROR = -1,
    SUCCESS = 0,
    FAIL = 1,
  };


  typedef boost::shared_ptr< ::exercise_skill::ExerciseResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exercise_skill::ExerciseResult_<ContainerAllocator> const> ConstPtr;

}; // struct ExerciseResult_

typedef ::exercise_skill::ExerciseResult_<std::allocator<void> > ExerciseResult;

typedef boost::shared_ptr< ::exercise_skill::ExerciseResult > ExerciseResultPtr;
typedef boost::shared_ptr< ::exercise_skill::ExerciseResult const> ExerciseResultConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::exercise_skill::ExerciseResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::exercise_skill::ExerciseResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace exercise_skill

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'interaction_msgs': ['/home/haobing/catkin_ws/src/interaction_msgs/msg'], 'exercise_skill': ['/home/haobing/catkin_ws/devel/share/exercise_skill/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'common_msgs': ['/home/haobing/catkin_ws/src/common_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::exercise_skill::ExerciseResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exercise_skill::ExerciseResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exercise_skill::ExerciseResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exercise_skill::ExerciseResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exercise_skill::ExerciseResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exercise_skill::ExerciseResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::exercise_skill::ExerciseResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e5dc85de4836ff949b7a939d7ae0b33";
  }

  static const char* value(const ::exercise_skill::ExerciseResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e5dc85de4836ff9ULL;
  static const uint64_t static_value2 = 0x49b7a939d7ae0b33ULL;
};

template<class ContainerAllocator>
struct DataType< ::exercise_skill::ExerciseResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "exercise_skill/ExerciseResult";
  }

  static const char* value(const ::exercise_skill::ExerciseResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::exercise_skill::ExerciseResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
int8 ERROR = -1\n\
int8 SUCCESS = 0\n\
int8 FAIL = 1\n\
int8 skill_result\n\
";
  }

  static const char* value(const ::exercise_skill::ExerciseResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::exercise_skill::ExerciseResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.skill_result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExerciseResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exercise_skill::ExerciseResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::exercise_skill::ExerciseResult_<ContainerAllocator>& v)
  {
    s << indent << "skill_result: ";
    Printer<int8_t>::stream(s, indent + "  ", v.skill_result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXERCISE_SKILL_MESSAGE_EXERCISERESULT_H
